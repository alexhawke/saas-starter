{
  "ignore": [
    ".git",
    "node_modules",
    ".next",
    "dist",
    "build",
    "pnpm-lock.yaml",
    "*.log",
    "*.lock",
    "*.min.js",
    "*.min.css"
  ],
  "formatOnSave": true,
  "formatOnPaste": true,
  "tabSize": 2,
  "insertSpaces": true,
  "trimTrailingWhitespace": true,
  "insertFinalNewline": true,
  "bracketPairColorization": true,
  "semanticHighlighting": true,
  "wordWrap": "off",
  "lineNumbers": "on",
  "rulers": [100],
  "codeActions": {
    "source.organizeImports": true,
    "source.fixAll": true
  },
  "quickSuggestions": {
    "other": true,
    "comments": false,
    "strings": true
  },
  "snippets": {
    "nextPage": {
      "prefix": "npage",
      "body": [
        "export default function Page() {",
        "  return (",
        "    <div>",
        "      $1",
        "    </div>",
        "  );",
        "}"
      ],
      "description": "Create a Next.js page component"
    },
    "nextLayout": {
      "prefix": "nlayout",
      "body": [
        "export default function Layout({ children }: { children: React.ReactNode }) {",
        "  return (",
        "    <div>",
        "      $1",
        "      {children}",
        "    </div>",
        "  );",
        "}"
      ],
      "description": "Create a Next.js layout component"
    },
    "reactComponent": {
      "prefix": "rcomp",
      "body": [
        "import React from 'react';",
        "",
        "interface ${1:ComponentName}Props {",
        "  $2",
        "}",
        "",
        "export function ${1:ComponentName}({ $3 }: ${1:ComponentName}Props) {",
        "  return (",
        "    <div>",
        "      $4",
        "    </div>",
        "  );",
        "}"
      ],
      "description": "Create a React functional component with TypeScript"
    },
    "useState": {
      "prefix": "us",
      "body": [
        "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState<${2:type}>(${3:initialState});"
      ],
      "description": "React useState hook with TypeScript"
    },
    "useEffect": {
      "prefix": "ue",
      "body": [
        "useEffect(() => {",
        "  $1",
        "  return () => {",
        "    $2",
        "  };",
        "}, [$3]);"
      ],
      "description": "React useEffect hook with cleanup"
    },
    "tailwindClass": {
      "prefix": "tw",
      "body": [
        "className=\"$1\""
      ],
      "description": "Add Tailwind CSS className"
    },
    "drizzleSchema": {
      "prefix": "dschema",
      "body": [
        "import { pgTable, serial, text, timestamp } from 'drizzle-orm/pg-core';",
        "",
        "export const ${1:tableName} = pgTable('${2:tableName}', {",
        "  id: serial('id').primaryKey(),",
        "  $3",
        "  createdAt: timestamp('created_at').defaultNow(),",
        "  updatedAt: timestamp('updated_at').defaultNow(),",
        "});"
      ],
      "description": "Create a Drizzle schema table"
    }
  },
  "fileAssociations": {
    "*.tsx": "typescriptreact",
    "*.jsx": "javascriptreact",
    "*.ts": "typescript",
    "*.js": "javascript",
    "*.css": "css",
    "*.module.css": "css",
    "*.module.scss": "scss",
    "*.json": "json",
    "*.md": "markdown"
  },
  "search": {
    "exclude": [
      "**/.git/**",
      "**/node_modules/**",
      "**/.next/**",
      "**/dist/**",
      "**/build/**",
      "**/*.min.js",
      "**/*.min.css",
      "**/pnpm-lock.yaml"
    ]
  },
  "aiAssist": {
    "enabled": true,
    "inlineCompletions": true,
    "chatCompletions": true,
    "contextLines": 50
  },
  "linting": {
    "eslint": {
      "enable": true,
      "autoFixOnSave": true
    },
    "typescript": {
      "enable": true,
      "reportMissingImports": true,
      "reportUnusedVariables": true
    }
  },
  "terminal": {
    "fontSize": 14,
    "lineHeight": 1.5,
    "cursorStyle": "line",
    "cursorBlink": true,
    "scrollback": 5000
  }
} 